* TINY Compilation to TM Code
* 
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> assign
* -> Const
* CONST 1
  2:    LDC  0,1(0) 	load const
* <- Const
  3:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> assign
* -> Const
* CONST 4
  4:    LDC  0,4(0) 	load const
* <- Const
  5:     ST  0,3(5) 	assign: store value
* stored into var 3
* <- assign
* -> Id
  6:     LD  0,1(5) 	load id value
* <- Id
  7:    OUT  0,0,0 	write ac
* -> Id
  8:     LD  0,3(5) 	load id value
* <- Id
  9:    OUT  0,0,0 	write ac
* -> assign
* -> BinOp
* -> Const
* CONST 3
 10:    LDC  0,3(0) 	load const
* <- Const
 11:     ST  0,0(6) 	op: push left
* -> Const
* CONST 2
 12:    LDC  0,2(0) 	load const
* <- Const
 13:     LD  1,0(6) 	op: load left
 14:    ADD  0,1,0 	op +
* <- BinOp
 15:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* <- while
* -> BinOp
* -> Id
 16:     LD  0,2(5) 	load id value
* <- Id
 17:     ST  0,0(6) 	op: push left
* -> Const
* CONST 10
 18:    LDC  0,10(0) 	load const
* <- Const
 19:     LD  1,0(6) 	op: load left
 20:    SUB  0,1,0 	op <
 21:    JLT  0,2(7) 	br if true
 22:    LDC  0,0(0) 	false case
 23:    LDA  7,1(7) 	unconditional jmp
 24:    LDC  0,1(0) 	true case
* <- BinOp
* -> assign
* -> Const
* CONST 2
 26:    LDC  0,2(0) 	load const
* <- Const
 27:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> assign
* -> Const
* CONST 5
 28:    LDC  0,5(0) 	load const
* <- Const
 29:     ST  0,3(5) 	assign: store value
* stored into var 3
* <- assign
* -> assign
* -> BinOp
* -> Id
 30:     LD  0,2(5) 	load id value
* <- Id
 31:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 32:    LDC  0,1(0) 	load const
* <- Const
 33:     LD  1,0(6) 	op: load left
 34:    ADD  0,1,0 	op +
* <- BinOp
 35:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> Id
 36:     LD  0,2(5) 	load id value
* <- Id
 37:    OUT  0,0,0 	write ac
 38:    LDA  7,-23(7) 	jmp back to cond
 25:    JEQ  0,13(7) 	jmp to end
* <- while
* -> Id
 39:     LD  0,1(5) 	load id value
* <- Id
 40:    OUT  0,0,0 	write ac
* -> Id
 41:     LD  0,3(5) 	load id value
* <- Id
 42:    OUT  0,0,0 	write ac
* End of execution.
 43:   HALT  0,0,0 	
