* TINY Compilation to TM Code
* File: tests/in/prog1.txt
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> assign
* -> Const
* CONST 1
  2:    LDC  0,1(0) 	load const
* <- Const
  3:    LDC  1,0(0) 	load const0
  4:    SUB  0,1,0 	unMinus: val=0-val
  5:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> assign
* -> Id
  6:     LD  0,1(5) 	load id value
* <- Id
  7:    LDC  1,0(0) 	load const0
  8:    SUB  0,1,0 	unMinus: val=0-val
  9:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> assign
* -> BinOp
* -> Const
* CONST 3
 10:    LDC  0,3(0) 	load const
* <- Const
 11:     ST  0,0(6) 	op: push left
* -> Const
* CONST 2
 12:    LDC  0,2(0) 	load const
* <- Const
 13:     LD  1,0(6) 	op: load left
 14:    ADD  0,1,0 	op +
* <- BinOp
 15:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> BinOp
* -> Id
 16:     LD  0,1(5) 	load id value
* <- Id
 17:     ST  0,0(6) 	op: push left
* -> Id
 18:     LD  0,2(5) 	load id value
* <- Id
 19:     LD  1,0(6) 	op: load left
 20:    ADD  0,1,0 	op +
* <- BinOp
 21:    OUT  0,0,0 	write ac
* <- while
* -> BinOp
* -> Id
 22:     LD  0,1(5) 	load id value
* <- Id
 23:     ST  0,0(6) 	op: push left
* -> Const
* CONST 10
 24:    LDC  0,10(0) 	load const
* <- Const
 25:     LD  1,0(6) 	op: load left
 26:    SUB  0,1,0 	op <
 27:    JLT  0,2(7) 	br if true
 28:    LDC  0,0(0) 	false case
 29:    LDA  7,1(7) 	unconditional jmp
 30:    LDC  0,1(0) 	true case
* <- BinOp
* -> assign
* -> BinOp
* -> Id
 32:     LD  0,1(5) 	load id value
* <- Id
 33:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 34:    LDC  0,1(0) 	load const
* <- Const
 35:     LD  1,0(6) 	op: load left
 36:    ADD  0,1,0 	op +
* <- BinOp
 37:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> if
* -> BinOp
* -> Id
 38:     LD  0,1(5) 	load id value
* <- Id
 39:     ST  0,0(6) 	op: push left
* -> Id
 40:     LD  0,2(5) 	load id value
* <- Id
 41:     LD  1,0(6) 	op: load left
 42:    SUB  0,1,0 	op <
 43:    JLT  0,2(7) 	br if true
 44:    LDC  0,0(0) 	false case
 45:    LDA  7,1(7) 	unconditional jmp
 46:    LDC  0,1(0) 	true case
* <- BinOp
* if: jump to else belongs here
* -> assign
* -> BinOp
* -> Id
 48:     LD  0,1(5) 	load id value
* <- Id
 49:     ST  0,0(6) 	op: push left
* -> Const
* CONST 2
 50:    LDC  0,2(0) 	load const
* <- Const
 51:     LD  1,0(6) 	op: load left
 52:    ADD  0,1,0 	op +
* <- BinOp
 53:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* if: jump to end belongs here
 47:    JEQ  0,7(7) 	if: jmp to else
* -> assign
* -> BinOp
* -> Id
 55:     LD  0,2(5) 	load id value
* <- Id
 56:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 57:    LDC  0,1(0) 	load const
* <- Const
 58:     LD  1,0(6) 	op: load left
 59:    SUB  0,1,0 	op -
* <- BinOp
 60:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
 54:    LDA  7,6(7) 	jmp to end
* <- if
* -> Id
 61:     LD  0,1(5) 	load id value
* <- Id
 62:    OUT  0,0,0 	write ac
* -> Id
 63:     LD  0,2(5) 	load id value
* <- Id
 64:    OUT  0,0,0 	write ac
 65:    LDA  7,-44(7) 	jmp back to cond
 31:    JEQ  0,34(7) 	jmp to end
* <- while
* <- while
* -> BinOp
* -> Id
 66:     LD  0,2(5) 	load id value
* <- Id
 67:     ST  0,0(6) 	op: push left
* -> Const
* CONST 10
 68:    LDC  0,10(0) 	load const
* <- Const
 69:     LD  1,0(6) 	op: load left
 70:    SUB  0,1,0 	op <
 71:    JLT  0,2(7) 	br if true
 72:    LDC  0,0(0) 	false case
 73:    LDA  7,1(7) 	unconditional jmp
 74:    LDC  0,1(0) 	true case
* <- BinOp
* -> assign
* -> BinOp
* -> Id
 76:     LD  0,2(5) 	load id value
* <- Id
 77:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 78:    LDC  0,1(0) 	load const
* <- Const
 79:     LD  1,0(6) 	op: load left
 80:    ADD  0,1,0 	op +
* <- BinOp
 81:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> assign
* -> Const
* CONST 1
 82:    LDC  0,1(0) 	load const
* <- Const
 83:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> Id
 84:     LD  0,2(5) 	load id value
* <- Id
 85:    OUT  0,0,0 	write ac
 86:    LDA  7,-21(7) 	jmp back to cond
 75:    JEQ  0,11(7) 	jmp to end
* <- while
* End of execution.
 87:   HALT  0,0,0 	
