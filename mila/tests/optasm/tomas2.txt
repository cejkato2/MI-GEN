* TINY Compilation to TM Code
* °R: tests/in/tomas2.txt
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> assign
* -> Const
* CONST 5
  2:    LDC  0,5(0) 	load const
* <- Const
  3:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* <- while
* -> BinOp
* -> Id
  4:     LD  0,1(5) 	load id value
* <- Id
  5:     ST  0,0(6) 	op: push left
* -> Const
* CONST 0
  6:    LDC  0,0(0) 	load const
* <- Const
  7:     LD  1,0(6) 	op: load left
  8:    SUB  0,1,0 	op !=
  9:    JGT  0,2(7) 	br if true
 10:    LDC  0,0(0) 	false case
 11:    LDA  7,1(7) 	unconditional jmp
 12:    LDC  0,1(0) 	true case
* <- BinOp
* -> Id
 14:     LD  0,1(5) 	load id value
* <- Id
 15:    OUT  0,0,0 	write ac
* -> assign
* -> BinOp
* -> BinOp
* -> Id
 16:     LD  0,2(5) 	load id value
* <- Id
 17:     ST  0,0(6) 	op: push left
* -> Const
* CONST 10
 18:    LDC  0,10(0) 	load const
* <- Const
 19:     LD  1,0(6) 	op: load left
 20:    MUL  0,1,0 	op *
* <- BinOp
 21:     ST  0,0(6) 	op: push left
* -> Id
 22:     LD  0,1(5) 	load id value
* <- Id
 23:     LD  1,0(6) 	op: load left
 24:    ADD  0,1,0 	op +
* <- BinOp
 25:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> Id
 26:     LD  0,2(5) 	load id value
* <- Id
 27:    OUT  0,0,0 	write ac
* -> assign
* -> BinOp
* -> Id
 28:     LD  0,1(5) 	load id value
* <- Id
 29:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 30:    LDC  0,1(0) 	load const
* <- Const
 31:     LD  1,0(6) 	op: load left
 32:    SUB  0,1,0 	op -
* <- BinOp
 33:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
 34:    LDA  7,-31(7) 	jmp back to cond
 13:    JEQ  0,21(7) 	jmp to end
* <- while
* End of execution.
 35:   HALT  0,0,0 	
