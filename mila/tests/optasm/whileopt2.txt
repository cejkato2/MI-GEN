* TINY Compilation to TM Code
* 
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> assign
* -> Const
* CONST 1
  2:    LDC  0,1(0) 	load const
* <- Const
  3:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* -> Id
  4:     LD  0,1(5) 	load id value
* <- Id
  5:    OUT  0,0,0 	write ac
* -> assign
* -> Const
* CONST 5
  6:    LDC  0,5(0) 	load const
* <- Const
  7:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> assign
* -> Const
* CONST 2
  8:    LDC  0,2(0) 	load const
* <- Const
  9:     ST  0,1(5) 	assign: store value
* stored into var 1
* <- assign
* <- while
* -> BinOp
* -> Id
 10:     LD  0,2(5) 	load id value
* <- Id
 11:     ST  0,0(6) 	op: push left
* -> Const
* CONST 10
 12:    LDC  0,10(0) 	load const
* <- Const
 13:     LD  1,0(6) 	op: load left
 14:    SUB  0,1,0 	op <
 15:    JLT  0,2(7) 	br if true
 16:    LDC  0,0(0) 	false case
 17:    LDA  7,1(7) 	unconditional jmp
 18:    LDC  0,1(0) 	true case
* <- BinOp
* -> assign
* -> BinOp
* -> Id
 20:     LD  0,2(5) 	load id value
* <- Id
 21:     ST  0,0(6) 	op: push left
* -> Const
* CONST 1
 22:    LDC  0,1(0) 	load const
* <- Const
 23:     LD  1,0(6) 	op: load left
 24:    ADD  0,1,0 	op +
* <- BinOp
 25:     ST  0,2(5) 	assign: store value
* stored into var 2
* <- assign
* -> Id
 26:     LD  0,2(5) 	load id value
* <- Id
 27:    OUT  0,0,0 	write ac
 28:    LDA  7,-19(7) 	jmp back to cond
 19:    JEQ  0,9(7) 	jmp to end
* <- while
* -> Id
 29:     LD  0,1(5) 	load id value
* <- Id
 30:    OUT  0,0,0 	write ac
* End of execution.
 31:   HALT  0,0,0 	
